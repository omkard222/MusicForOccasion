- url = (@profile.new_record? ? create_profile_path : profile_path)
- method = (@profile.new_record? ? "post" : "put")
= semantic_form_for @profile, url: url, method: method do |f|
  .space30
  = f.input :user_id, as: :hidden, :input_html => { :value => current_user ? current_user.id : @user.id }
  = f.input :profile_type, as: :hidden, :input_html => { :value => "#{(@type == 'musician') ? 1 : 0}".to_i }
  = f.input :id, as: :hidden
  = f.input :sub_type, as: :hidden, :input_html => { :value => params[:type] || @profile.sub_type } 
  - %w[x y w h].each do |attribute| 
    = f.hidden_field "crop_#{attribute}" 
  .row
    .col-md-6
      = f.input :profile_picture, input_html: { id: 'file' }
      = image_tag(@profile.picture, class: 'img-responsive ', id: 'image_profile')
      #fileUpload.div_upload_profile
        table
          tr
            td
              i.fa.fa-camera.fa-3x
            td.padding_left_15
              div= t('profiles.form_for_registered_user.update_picture')
      #fileUploadName
    .col-md-6
      h4 style="padding-top: 20px; color: #00b0ff" = "Crop Profile Picture"
      = image_tag(@profile.picture,  id: 'cropbox', class: "cropbox", style: "width: 250px; height: 250px;")
  br
  = f.input :username
  = f.inputs :location, class: 'location'
  .row
    .col-sm-4
      h3= f.submit (@profile.new_record? ? 'Save' : 'Update profile'), class: 'btn btn-info btn-block btn-base'
      .space10                  
    - unless @profile.new_record?
      .col-sm-4
        h3= link_to t('profiles.form_for_registered_user.delete_profile'), profile_delete_profile_path(@profile), class: 'btn btn-danger btn-block btn-base'
        .space10
      .col-sm-4
        h3= link_to 'Cancel', profile_path(current_user.current_profile), class: 'btn btn-default btn-block btn-base'
        .space10
.space40

javascript:
  var AvatarCropper,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    return new AvatarCropper();
  });

  AvatarCropper = (function() {
  
    function AvatarCropper() {
    
      this.updatePreview = bind(this.updatePreview, this);
      this.update = bind(this.update, this);    $('#cropbox').Jcrop({
        aspectRatio: 1,
        setSelect: [0, 0, 600, 600],
        onSelect: this.update,
        onChange: this.update
      });
    }
    AvatarCropper.prototype.update = function(coords) {
      $('#profile_crop_x').val($('#cropbox')[0].naturalWidth/ $('#cropbox').width() * coords.x);
      $('#profile_crop_y').val($('#cropbox')[0].naturalHeight/ $('#cropbox').height() * coords.y);
      $('#profile_crop_w').val($('#cropbox')[0].naturalWidth/ $('#cropbox').width() * coords.w);
      $('#profile_crop_h').val($('#cropbox')[0].naturalHeight/ $('#cropbox').height() * coords.h);
      return this.updatePreview(coords);
    };
    AvatarCropper.prototype.updatePreview = function(coords) {
   
      return $('#preview').css({
        width: Math.round(100 / coords.w * $('#cropbox').width()) + 'px',
        height: Math.round(100 / coords.h * $('#cropbox').height()) + 'px',
        marginLeft: '-' + Math.round(100 / coords.w * coords.x) + 'px',
        marginTop: '-' + Math.round(100 / coords.h * coords.y) + 'px'
      });
    };
    return AvatarCropper;
  })();
  
  $(document).ready(function(){
    $('#profile_crop_x').val("0");
    $('#profile_crop_y').val("0");
    $('#profile_crop_w').val($('#cropbox')[0].naturalWidth);
    $('#profile_crop_h').val($('#cropbox')[0].naturalHeight);
  });